/*
	ConditionalGraph represents a collection of nodes and conditional transitions
	(directed edges) between them, with methods for traversal.

	Transitions are stored on nodes.

	Graphs may be generated by factories for common types of exercises.
	e.g.:
		Straight sequences
		Accelerating loops
		Random sections from a set
		Loop until perfect
		etc.
*/

ConditionalGraph = Ember.Object.extend({
	currentNode: null,
	nodes: null,

	init: function(){
		this._super();
		this.set("nodes", this.get("nodes") || []);
	},

	addNode: function(node){
		var nodes = this.get("nodes");
		nodes.push(node);
		if(nodes.length == 1){
			this.set("currentNode", node);
		}
	},

	nextNode: function(){
		var currentNode = this.get("currentNode");
		return currentNode.nextNode();
	},

	advance: function(){
		// Go to the next node
		var next = this.nextNode();
		this.set("currentNode", next);

		// Return the new position.
		return next;
	}
});


/*
	A Node contains an array of possible transitions to other nodes.

	The node's actual contents can be specified on objects extended from this one.
*/
ConditionalGraph.Node = Ember.Object.extend({
	transitions: null,

	init: function(){
		this.set("transitions", this.get("transitions") || []);
	},

	addNewTransition: function(node, condition){
		if(!condition){
			condition = function(){
				return true;
			};
		}
		var transition = ConditionalGraph.Transition.create({
			sourceNode: this,
			targetNode: node,
			shouldTransition: condition
		});
		this.get("transitions").push(transition);
	},

	addTransition: function(transition){
		thsi.get("transitions").push(transition);
	},

	nextNode: function(){
		var transitions = this.get("transitions");
		var i, len = transitions.length;
		for(i=0; i<len; i++){
			var transition = transitions[i];
			if(transition.shouldTransition()){
				return transition.get("targetNode");
			}
		}
		return null;
	}
});

/*
	A Transition defines a shouldTransition method that must
	evaluate to true to allow traversal between nodes.
*/
ConditionalGraph.Transition = Ember.Object.extend({
	sourceNode: null,
	targetNode: null,

	shouldTransition: function(){
		return true;
	}
});